/*******************************************************************************
	Generated by: DLL to C version 3.74
	Date: 2020-5-12
	Description: The implementation code for Win32Dll.dll.
	Website: http://www.dll-decompiler.com
	Technical Support: support@dll-decompiler.com
*******************************************************************************/

#include "stdafx.h"
#include "Win32Dll.h"


HMODULE g_hWin32Dll;
BOOL (WINAPI *Win32Dll_DllEntryPoint)(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved);

extern UCHAR Win32Dll_text[0x7000];
extern stWin32Dll_rdata Win32Dll_rdata;
extern stWin32Dll_data Win32Dll_data;

__declspec(align(16)) stWin32Dll Win32Dll;

void* __stdcall Win32Dll_RVA(DWORD rvaAddr)
{
	if(rvaAddr==0)
		return g_hWin32Dll;
	if(rvaAddr >= 0 && rvaAddr < 0xE000)
		return (UCHAR*)&Win32Dll + rvaAddr;

	return NULL;
}

FARPROC __stdcall Win32Dll_GetExport(LPCSTR lpExportName)
{
	if(lstrcmpA(lpExportName,"TestFun")==0)
		return (FARPROC)Win32Dll_VA(0x10001010);

	return NULL;
}

BOOL Win32Dll_Init()
{
	HMODULE hDll;
	DWORD oldProtect;
	void (*fInitData)(HMODULE,void*,void*);

	oldProtect = PAGE_EXECUTE_READWRITE;
	VirtualProtect(&Win32Dll,sizeof(Win32Dll),PAGE_EXECUTE_READWRITE,&oldProtect);

	memcpy(&Win32Dll.Text,&Win32Dll_text,sizeof(Win32Dll_text));
	memcpy(&Win32Dll.Rdata,&Win32Dll_rdata,sizeof(Win32Dll_rdata));
	memcpy(&Win32Dll.Data,&Win32Dll_data,sizeof(Win32Dll_data));

	hDll = ::LoadLibraryA("USER32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"USER32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)Win32Dll_VA(0x100080EC) = ::GetProcAddress(hDll,"MessageBoxA");
	if(!*(FARPROC*)Win32Dll_VA(0x100080EC))
		return FALSE;

	hDll = ::LoadLibraryA("KERNEL32.dll");
	if(!hDll)
	{
#ifdef _DEBUG
		MessageBoxA(NULL,
			"Please copy the dependent DLL \"KERNEL32.dll\" to the working directory.",
			"Load DLL Failed",MB_OK|MB_ICONERROR);
#endif
		ASSERT(0);
		return FALSE;
	}
	*(FARPROC*)Win32Dll_VA(0x10008000) = ::GetProcAddress(hDll,"GetTickCount");
	if(!*(FARPROC*)Win32Dll_VA(0x10008000))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008004) = ::GetProcAddress(hDll,"GetCurrentThreadId");
	if(!*(FARPROC*)Win32Dll_VA(0x10008004))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008008) = ::GetProcAddress(hDll,"GetCommandLineA");
	if(!*(FARPROC*)Win32Dll_VA(0x10008008))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000800C) = ::GetProcAddress(hDll,"TerminateProcess");
	if(!*(FARPROC*)Win32Dll_VA(0x1000800C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008010) = ::GetProcAddress(hDll,"GetCurrentProcess");
	if(!*(FARPROC*)Win32Dll_VA(0x10008010))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008014) = ::GetProcAddress(hDll,"UnhandledExceptionFilter");
	if(!*(FARPROC*)Win32Dll_VA(0x10008014))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008018) = ::GetProcAddress(hDll,"SetUnhandledExceptionFilter");
	if(!*(FARPROC*)Win32Dll_VA(0x10008018))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000801C) = ::GetProcAddress(hDll,"IsDebuggerPresent");
	if(!*(FARPROC*)Win32Dll_VA(0x1000801C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008020) = ::GetProcAddress(hDll,"GetModuleHandleW");
	if(!*(FARPROC*)Win32Dll_VA(0x10008020))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008024) = ::GetProcAddress(hDll,"GetProcAddress");
	if(!*(FARPROC*)Win32Dll_VA(0x10008024))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008028) = ::GetProcAddress(hDll,"TlsGetValue");
	if(!*(FARPROC*)Win32Dll_VA(0x10008028))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000802C) = ::GetProcAddress(hDll,"TlsAlloc");
	if(!*(FARPROC*)Win32Dll_VA(0x1000802C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008030) = ::GetProcAddress(hDll,"TlsSetValue");
	if(!*(FARPROC*)Win32Dll_VA(0x10008030))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008034) = ::GetProcAddress(hDll,"TlsFree");
	if(!*(FARPROC*)Win32Dll_VA(0x10008034))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008038) = ::GetProcAddress(hDll,"InterlockedIncrement");
	if(!*(FARPROC*)Win32Dll_VA(0x10008038))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000803C) = ::GetProcAddress(hDll,"SetLastError");
	if(!*(FARPROC*)Win32Dll_VA(0x1000803C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008040) = ::GetProcAddress(hDll,"GetLastError");
	if(!*(FARPROC*)Win32Dll_VA(0x10008040))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008044) = ::GetProcAddress(hDll,"InterlockedDecrement");
	if(!*(FARPROC*)Win32Dll_VA(0x10008044))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008048) = ::GetProcAddress(hDll,"HeapFree");
	if(!*(FARPROC*)Win32Dll_VA(0x10008048))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000804C) = ::GetProcAddress(hDll,"Sleep");
	if(!*(FARPROC*)Win32Dll_VA(0x1000804C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008050) = ::GetProcAddress(hDll,"ExitProcess");
	if(!*(FARPROC*)Win32Dll_VA(0x10008050))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008054) = ::GetProcAddress(hDll,"SetHandleCount");
	if(!*(FARPROC*)Win32Dll_VA(0x10008054))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008058) = ::GetProcAddress(hDll,"GetStdHandle");
	if(!*(FARPROC*)Win32Dll_VA(0x10008058))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000805C) = ::GetProcAddress(hDll,"GetFileType");
	if(!*(FARPROC*)Win32Dll_VA(0x1000805C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008060) = ::GetProcAddress(hDll,"GetStartupInfoA");
	if(!*(FARPROC*)Win32Dll_VA(0x10008060))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008064) = ::GetProcAddress(hDll,"DeleteCriticalSection");
	if(!*(FARPROC*)Win32Dll_VA(0x10008064))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008068) = ::GetProcAddress(hDll,"GetModuleFileNameA");
	if(!*(FARPROC*)Win32Dll_VA(0x10008068))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000806C) = ::GetProcAddress(hDll,"FreeEnvironmentStringsA");
	if(!*(FARPROC*)Win32Dll_VA(0x1000806C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008070) = ::GetProcAddress(hDll,"GetEnvironmentStrings");
	if(!*(FARPROC*)Win32Dll_VA(0x10008070))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008074) = ::GetProcAddress(hDll,"FreeEnvironmentStringsW");
	if(!*(FARPROC*)Win32Dll_VA(0x10008074))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008078) = ::GetProcAddress(hDll,"WideCharToMultiByte");
	if(!*(FARPROC*)Win32Dll_VA(0x10008078))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000807C) = ::GetProcAddress(hDll,"GetEnvironmentStringsW");
	if(!*(FARPROC*)Win32Dll_VA(0x1000807C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008080) = ::GetProcAddress(hDll,"HeapCreate");
	if(!*(FARPROC*)Win32Dll_VA(0x10008080))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008084) = ::GetProcAddress(hDll,"HeapDestroy");
	if(!*(FARPROC*)Win32Dll_VA(0x10008084))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008088) = ::GetProcAddress(hDll,"VirtualFree");
	if(!*(FARPROC*)Win32Dll_VA(0x10008088))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000808C) = ::GetProcAddress(hDll,"QueryPerformanceCounter");
	if(!*(FARPROC*)Win32Dll_VA(0x1000808C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008090) = ::GetProcAddress(hDll,"GetCurrentProcessId");
	if(!*(FARPROC*)Win32Dll_VA(0x10008090))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008094) = ::GetProcAddress(hDll,"GetSystemTimeAsFileTime");
	if(!*(FARPROC*)Win32Dll_VA(0x10008094))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x10008098) = ::GetProcAddress(hDll,"LeaveCriticalSection");
	if(!*(FARPROC*)Win32Dll_VA(0x10008098))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x1000809C) = ::GetProcAddress(hDll,"EnterCriticalSection");
	if(!*(FARPROC*)Win32Dll_VA(0x1000809C))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080A0) = ::GetProcAddress(hDll,"GetCPInfo");
	if(!*(FARPROC*)Win32Dll_VA(0x100080A0))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080A4) = ::GetProcAddress(hDll,"GetACP");
	if(!*(FARPROC*)Win32Dll_VA(0x100080A4))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080A8) = ::GetProcAddress(hDll,"GetOEMCP");
	if(!*(FARPROC*)Win32Dll_VA(0x100080A8))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080AC) = ::GetProcAddress(hDll,"IsValidCodePage");
	if(!*(FARPROC*)Win32Dll_VA(0x100080AC))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080B0) = ::GetProcAddress(hDll,"HeapAlloc");
	if(!*(FARPROC*)Win32Dll_VA(0x100080B0))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080B4) = ::GetProcAddress(hDll,"VirtualAlloc");
	if(!*(FARPROC*)Win32Dll_VA(0x100080B4))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080B8) = ::GetProcAddress(hDll,"HeapReAlloc");
	if(!*(FARPROC*)Win32Dll_VA(0x100080B8))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080BC) = ::GetProcAddress(hDll,"WriteFile");
	if(!*(FARPROC*)Win32Dll_VA(0x100080BC))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080C0) = ::GetProcAddress(hDll,"LoadLibraryA");
	if(!*(FARPROC*)Win32Dll_VA(0x100080C0))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080C4) = ::GetProcAddress(hDll,"InitializeCriticalSectionAndSpinCount");
	if(!*(FARPROC*)Win32Dll_VA(0x100080C4))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080C8) = ::GetProcAddress(hDll,"RtlUnwind");
	if(!*(FARPROC*)Win32Dll_VA(0x100080C8))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080CC) = ::GetProcAddress(hDll,"GetLocaleInfoA");
	if(!*(FARPROC*)Win32Dll_VA(0x100080CC))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080D0) = ::GetProcAddress(hDll,"GetStringTypeA");
	if(!*(FARPROC*)Win32Dll_VA(0x100080D0))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080D4) = ::GetProcAddress(hDll,"MultiByteToWideChar");
	if(!*(FARPROC*)Win32Dll_VA(0x100080D4))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080D8) = ::GetProcAddress(hDll,"GetStringTypeW");
	if(!*(FARPROC*)Win32Dll_VA(0x100080D8))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080DC) = ::GetProcAddress(hDll,"LCMapStringA");
	if(!*(FARPROC*)Win32Dll_VA(0x100080DC))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080E0) = ::GetProcAddress(hDll,"LCMapStringW");
	if(!*(FARPROC*)Win32Dll_VA(0x100080E0))
		return FALSE;
	*(FARPROC*)Win32Dll_VA(0x100080E4) = ::GetProcAddress(hDll,"HeapSize");
	if(!*(FARPROC*)Win32Dll_VA(0x100080E4))
		return FALSE;

	VirtualProtect(&Win32Dll_InitData, sizeof(Win32Dll_InitData), PAGE_EXECUTE_READWRITE, &oldProtect);

	*(FARPROC*)&fInitData = (FARPROC)&Win32Dll_InitData[0];
	fInitData(g_hWin32Dll,Win32Dll_RVA,Win32Dll_GetExport);

	*(FARPROC*)&Win32Dll_DllEntryPoint = (FARPROC)Win32Dll_VA(0x10001263);
	return TRUE;
}

extern "C" __declspec(naked) void TestFun(){__asm push offset Win32Dll + 0x1010 __asm ret}

/* Replace the default DllMain in dllmain.cpp */
BOOL APIENTRY DllMain( HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
	if(ul_reason_for_call==DLL_PROCESS_ATTACH)
	{
		g_hWin32Dll = hModule;
		Win32Dll_Init();
	}

	return Win32Dll_DllEntryPoint(hModule,ul_reason_for_call,lpReserved);
}

